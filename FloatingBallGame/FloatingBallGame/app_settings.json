{
    "sample_providers": [
        {
            "name": "Jarrad Microphone Sample",
            "calibration_sample": "samples\\JVS_u_MicCal_20180118.wav",
            "playing_sample": "samples\\JVS_u_Mic_20180118.wav",
            "id": "c2cc552b-14cf-4fc9-86e0-8f3a6a9dbae6"
        },
        {
            "name": "Jarrad Flow Sample",
            "calibration_sample": "samples\\JVS_u_FlowCal_20180118.wav",
            "playing_sample": "samples\\JVS_u_Flow_20180118.wav",
            "id": "c22914a8-2490-4467-8779-f12d050b630a"
        }
    ],

    // The ball color scale works as a selection of colors between the following keypoints.  Each point is defined
    // by the ratio, which is the fraction of the goal ratio at which the RGB values are the dominant colors.  During each
    // frame update, the ratio of volume to flow is computed.  The program starts at the smallest ratio keypoint and goes through
    // each keypoint in ascending order, and as soon as it finds one that's bigger than the computed ratio it applies that color.
    // If it gets to the end of the scale it uses the highest ratio color.
    "ball_color_scale": [
        {
            "ratio": 0.9, // Below 90% of the goal ratio, the ball is blue
            "rgb": [ 0, 0, 1 ]
        },
        {
            "ratio": 0.95, // From 90% to 95% the ball is light blue
            "rgb": [ 0.5, 0.5, 1 ]
        },
        {
            "ratio": 1.05, // From 95% to 105% the ball is white
            "rgb": [ 1, 1, 1 ]
        },
        {
            "ratio": 1.1, // From 105% to 110% the ball is light red
            "rgb": [ 1.0, 0.5, 0.5 ]
        },
        {
            "ratio": 2.0, // Anything above 110% the ball is blue (because of the way the algorithm works the value here doesn't matter as long as its above 1.1
            "rgb": [ 1.0, 0.0, 0.0 ]
        }
    ],

    // The following two parameters control the smoothness of the color transitions by interpolating a stored set of colors
    // around the keypoints.  A larger blend zone will appear visually smoother, since changes in flow ratio will produce less
    // dramatic color changes, but will also steal color space from the solid colors, making it more difficult to know where the
    // ratio is.  More color blend steps to a point will make smoother color transitions as well, but will also be more taxing
    // on the computer.
    //
    // Be careful to make sure that no instance of a ratio + color_blend_zone is greater than the next highest keypoint ratio
    // minus color_blend_zone, as the behavior in such a case will be undefined.
    "color_blend_zone": 0.02, // The +/- zone around a keypoint where the color blends smoothly
    "color_blend_steps": 5, // The number of color interpolation steps to transition from one color to the next

    // trial start/stop parameters
    "trial_start_threshold": 0.001, // L/s threshold
    "trial_start_window": 5, // Number of frames that must be above or below the threshold to start/stop the trial
    "history_window": 11, // Number of frames used to calculate the flow and volume

    // Audio properties
    "sample_rate": 22050,
    "buffer_ms": 50,

    // Graphics parameters allow the visual presentation of the game to
    // be altered.
    "ball_size": 30,
    "graphics_scale": 100, // Scale factor for the graphics
    "graphics_origin": 100, // vertical offset for the graphics, positive values shift everything lower

    // Ball physics tunable parameters
    "frequency": 1.0, // Frequency scaling factor, larger makes the ball oscilate faster

    "upper_flow_limit": 0.1, // L/s flow limit, above which the ball and error box turn red
    "lower_flow_limit": 0.08, // L/s flow minimum, below which the ball and error box turn red

    "goal_ratio": 800 // goal ratio of dB divided by flow
}